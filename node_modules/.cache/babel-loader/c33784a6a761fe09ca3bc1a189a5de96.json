{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useOpenState } from './useOpenState';\nimport { useUtils } from './useUtils';\nexport const usePickerState = (props, valueManager) => {\n  const {\n    disableCloseOnSelect,\n    onAccept,\n    onChange,\n    value\n  } = props;\n  const utils = useUtils();\n  const {\n    isOpen,\n    setIsOpen\n  } = useOpenState(props);\n\n  function initDraftableDate(date) {\n    return {\n      committed: date,\n      draft: date\n    };\n  }\n\n  const parsedDateValue = valueManager.parseInput(utils, value);\n  const [draftState, dispatch] = React.useReducer((state, action) => {\n    switch (action.type) {\n      case 'reset':\n        return initDraftableDate(action.payload);\n\n      case 'update':\n        return _extends({}, state, {\n          draft: action.payload\n        });\n\n      default:\n        return state;\n    }\n  }, parsedDateValue, initDraftableDate);\n\n  if (!valueManager.areValuesEqual(utils, draftState.committed, parsedDateValue)) {\n    dispatch({\n      type: 'reset',\n      payload: parsedDateValue\n    });\n  }\n\n  const [initialDate, setInitialDate] = React.useState(draftState.committed); // Mobile keyboard view is a special case.\n  // When it's open picker should work like closed, cause we are just showing text field\n\n  const [isMobileKeyboardViewOpen, setMobileKeyboardViewOpen] = React.useState(false);\n  const acceptDate = React.useCallback((acceptedDate, needClosePicker) => {\n    onChange(acceptedDate);\n\n    if (needClosePicker) {\n      setIsOpen(false);\n      setInitialDate(acceptedDate);\n\n      if (onAccept) {\n        onAccept(acceptedDate);\n      }\n    }\n  }, [onAccept, onChange, setIsOpen]);\n  const wrapperProps = React.useMemo(() => ({\n    open: isOpen,\n    onClear: () => acceptDate(valueManager.emptyValue, true),\n    onAccept: () => acceptDate(draftState.draft, true),\n    onDismiss: () => acceptDate(initialDate, true),\n    onSetToday: () => {\n      const now = utils.date();\n      dispatch({\n        type: 'update',\n        payload: now\n      });\n      acceptDate(now, !disableCloseOnSelect);\n    }\n  }), [acceptDate, disableCloseOnSelect, isOpen, utils, draftState.draft, valueManager.emptyValue, initialDate]);\n  const pickerProps = React.useMemo(() => ({\n    date: draftState.draft,\n    isMobileKeyboardViewOpen,\n    toggleMobileKeyboardView: () => setMobileKeyboardViewOpen(!isMobileKeyboardViewOpen),\n    onDateChange: function (newDate, wrapperVariant) {\n      let selectionState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'partial';\n      dispatch({\n        type: 'update',\n        payload: newDate\n      });\n\n      if (selectionState === 'partial') {\n        acceptDate(newDate, false);\n      }\n\n      if (selectionState === 'finish') {\n        const shouldCloseOnSelect = !(disableCloseOnSelect != null ? disableCloseOnSelect : wrapperVariant === 'mobile');\n        acceptDate(newDate, shouldCloseOnSelect);\n      } // if selectionState === \"shallow\" do nothing (we already update the draft state)\n\n    }\n  }), [acceptDate, disableCloseOnSelect, isMobileKeyboardViewOpen, draftState.draft]);\n  const inputProps = React.useMemo(() => ({\n    onChange,\n    open: isOpen,\n    rawValue: value,\n    openPicker: () => setIsOpen(true)\n  }), [onChange, isOpen, value, setIsOpen]);\n  const pickerState = {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  };\n  React.useDebugValue(pickerState, () => ({\n    MuiPickerState: {\n      pickerDraft: draftState,\n      other: pickerState\n    }\n  }));\n  return pickerState;\n};","map":{"version":3,"names":["_extends","React","useOpenState","useUtils","usePickerState","props","valueManager","disableCloseOnSelect","onAccept","onChange","value","utils","isOpen","setIsOpen","initDraftableDate","date","committed","draft","parsedDateValue","parseInput","draftState","dispatch","useReducer","state","action","type","payload","areValuesEqual","initialDate","setInitialDate","useState","isMobileKeyboardViewOpen","setMobileKeyboardViewOpen","acceptDate","useCallback","acceptedDate","needClosePicker","wrapperProps","useMemo","open","onClear","emptyValue","onDismiss","onSetToday","now","pickerProps","toggleMobileKeyboardView","onDateChange","newDate","wrapperVariant","selectionState","shouldCloseOnSelect","inputProps","rawValue","openPicker","pickerState","useDebugValue","MuiPickerState","pickerDraft","other"],"sources":["/Users/hardtiwari/react/cardekho/node_modules/@mui/x-date-pickers/internals/hooks/usePickerState.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useOpenState } from './useOpenState';\nimport { useUtils } from './useUtils';\nexport const usePickerState = (props, valueManager) => {\n  const {\n    disableCloseOnSelect,\n    onAccept,\n    onChange,\n    value\n  } = props;\n  const utils = useUtils();\n  const {\n    isOpen,\n    setIsOpen\n  } = useOpenState(props);\n\n  function initDraftableDate(date) {\n    return {\n      committed: date,\n      draft: date\n    };\n  }\n\n  const parsedDateValue = valueManager.parseInput(utils, value);\n  const [draftState, dispatch] = React.useReducer((state, action) => {\n    switch (action.type) {\n      case 'reset':\n        return initDraftableDate(action.payload);\n\n      case 'update':\n        return _extends({}, state, {\n          draft: action.payload\n        });\n\n      default:\n        return state;\n    }\n  }, parsedDateValue, initDraftableDate);\n\n  if (!valueManager.areValuesEqual(utils, draftState.committed, parsedDateValue)) {\n    dispatch({\n      type: 'reset',\n      payload: parsedDateValue\n    });\n  }\n\n  const [initialDate, setInitialDate] = React.useState(draftState.committed); // Mobile keyboard view is a special case.\n  // When it's open picker should work like closed, cause we are just showing text field\n\n  const [isMobileKeyboardViewOpen, setMobileKeyboardViewOpen] = React.useState(false);\n  const acceptDate = React.useCallback((acceptedDate, needClosePicker) => {\n    onChange(acceptedDate);\n\n    if (needClosePicker) {\n      setIsOpen(false);\n      setInitialDate(acceptedDate);\n\n      if (onAccept) {\n        onAccept(acceptedDate);\n      }\n    }\n  }, [onAccept, onChange, setIsOpen]);\n  const wrapperProps = React.useMemo(() => ({\n    open: isOpen,\n    onClear: () => acceptDate(valueManager.emptyValue, true),\n    onAccept: () => acceptDate(draftState.draft, true),\n    onDismiss: () => acceptDate(initialDate, true),\n    onSetToday: () => {\n      const now = utils.date();\n      dispatch({\n        type: 'update',\n        payload: now\n      });\n      acceptDate(now, !disableCloseOnSelect);\n    }\n  }), [acceptDate, disableCloseOnSelect, isOpen, utils, draftState.draft, valueManager.emptyValue, initialDate]);\n  const pickerProps = React.useMemo(() => ({\n    date: draftState.draft,\n    isMobileKeyboardViewOpen,\n    toggleMobileKeyboardView: () => setMobileKeyboardViewOpen(!isMobileKeyboardViewOpen),\n    onDateChange: (newDate, wrapperVariant, selectionState = 'partial') => {\n      dispatch({\n        type: 'update',\n        payload: newDate\n      });\n\n      if (selectionState === 'partial') {\n        acceptDate(newDate, false);\n      }\n\n      if (selectionState === 'finish') {\n        const shouldCloseOnSelect = !(disableCloseOnSelect != null ? disableCloseOnSelect : wrapperVariant === 'mobile');\n        acceptDate(newDate, shouldCloseOnSelect);\n      } // if selectionState === \"shallow\" do nothing (we already update the draft state)\n\n    }\n  }), [acceptDate, disableCloseOnSelect, isMobileKeyboardViewOpen, draftState.draft]);\n  const inputProps = React.useMemo(() => ({\n    onChange,\n    open: isOpen,\n    rawValue: value,\n    openPicker: () => setIsOpen(true)\n  }), [onChange, isOpen, value, setIsOpen]);\n  const pickerState = {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  };\n  React.useDebugValue(pickerState, () => ({\n    MuiPickerState: {\n      pickerDraft: draftState,\n      other: pickerState\n    }\n  }));\n  return pickerState;\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}